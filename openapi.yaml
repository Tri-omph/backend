openapi: 3.0.0
info:
  title: API de Tri des Déchets
  version: 1.0.0
  description: API pour la gestion de l'authentification des utilisateurs, du scan des déchets et du tri

servers:
  - url: https://api.example.com/api/v1
    description: Serveur de production
  - url: http://localhost:3000/api/v1
    description: Serveur de développement local

paths:
  /users:
    post:
      summary: Créer un nouvel utilisateur
      description: Crée un nouveau compte utilisateur, vérifie si le nom d'utilisateur et l'email sont uniques, et retourne un token JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: Utilisateur créé avec succès, retourne un token JWT.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Entrée invalide ou email/nom d'utilisateur déjà pris.
        '429':
          description: Trop de requêtes. Vous avez dépassé la limite de taux. Veuillez réessayer plus tard.

  /users/auth:
    post:
      summary: Authentifier un utilisateur
      description: Authentifie un utilisateur en vérifiant le nom d'utilisateur et le mot de passe, et retourne un token JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Authentification réussie, retourne un token JWT.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Nom d'utilisateur ou mot de passe invalide.
        '429':
          description: Trop de requêtes. Vous avez dépassé la limite de taux. Veuillez réessayer plus tard

  /users/me:
    get:
      summary: Obtenir les informations de l'utilisateur actuel
      description: Récupère les informations de l'utilisateur authentifié actuel en utilisant son token JWT.
      responses:
        '200':
          description: Informations de l'utilisateur récupérées avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
        '401':
          description: Non autorisé, token JWT invalide ou manquant.

    patch:
      summary: Mettre à jour les informations de l'utilisateur actuel
      description: Met à jour le profil de l'utilisateur actuel, tel que l'email, le nom d'utilisateur ou les préférences.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
      responses:
        '200':
          description: Informations de l'utilisateur mises à jour avec succès.
        '400':
          description: Entrée invalide.
        '401':
          description: Non autorisé, token JWT invalide ou manquant.

  /users/info/{id}:
    get:
      summary: Obtenir les informations d'un utilisateur
      description: Récupère les informations d'un utilisateur à l'aide de son ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de l'utilisateur dont on souhaite récupérer les informations.
      responses:
        '200':
          description: Informations de l'utilisateur récupérées avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                  points:
                    type: integer
                  restricted:
                    type: boolean
                  admin:
                    type: boolean
        '404':
          description: Utilisateur non trouvé.

  /users/find/:
    post:
      summary: Chercher un utilisateur
      description: Permet de rechercher un utilisateur en fonction des critères de filtre spécifiés.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                username:
                  type: string
                pointsMin:
                  type: integer
                pointsMax:
                  type: integer
                login:
                  type: string
                restricted:
                  type: boolean
                admin:
                  type: boolean
      responses:
        '200':
          description: Résultats de la recherche retournés avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    email:
                      type: string
                    points:
                      type: integer
                    restricted:
                      type: boolean
                    admin:
                      type: boolean
        '400':
          description: Paramètres de recherche invalides.

  /users/history/me:
    get:
      summary: Récupère l'historique de l'utilisateur actuel.
      description: Récupère l'historique de l'utilisateur authentifié.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Historique récupéré.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanHistory'
        '401':
          description: 'Authentification requise ou token invalide ou expiré.'
        '404':
          description: 'Utilisateur non trouvé.'
        '500':
          description: 'Erreur interne.'
    post:
      summary: Ajoute une nouvelle entrée.
      description: Ajoute une nouvelle entrée dans l'historique de l'utilisateur authentifié.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewScanHistory'
      responses:
        '201':
          description: Scan history successfully added.
        '400':
          description: Tous les champs sont requis.
        '401':
          description: Authenthification requise.
        '404':
          description: Utilisateur introuvable.
        '500':
          description: Erreur interne.

  /users/history/{id}:
    get:
      summary: Récupère l'historique d'un utilisateur (Administrateur)
      description: Récupère l'historique d'un utilisateur par ID. Demande les privilèges admin.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: L'ID de l'utilisateur dont on veut.
          schema:
            type: integer
      responses:
        "200":
          description: Historique récupéré.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScanHistory"
        "401":
          description: Authentification requise.
        "404":
          description: Utilisateur introuvable.
        "422":
          description: ID non numérique.
        "500":
          description: Erreur interne.

  /scan/barcode:
    post:
      summary: Scanner et traiter un article de déchet.
      description: Accepte un code-barres et retourne le résultat de la reconnaissance.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type: number
                description: Le code-barre.
      responses:
        '200':
          description: Scan traité avec succès, retourne les résultats de reconnaissance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    type: string # À déterminer avec le frontend
        '400':
          description: Données de scan invalides.
        '429':
          description: Trop de requêtes. Vous avez dépassé la limite de taux. Veuillez réessayer plus tard.

  /scan/image:
    post:
      summary: Scanner et traiter un article de déchet
      description: Accepte une image pour le scan des déchets et retourne le résultat de la reconnaissance.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type: number
                description: Le code-barres.
      responses:
        '200':
          description: Scan traité avec succès, retourne les résultats de reconnaissance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    type: string # À déterminer avec le frontend
        '400':
          description: Données de scan invalides.
        '429':
          description: Trop de requêtes. Vous avez dépassé la limite de taux. Veuillez réessayer plus tard.

  /ai-data:
    get:
      summary: Obtenir les données mises à jour du modèle AI
      description: Récupère les données mises à jour de l'IA pour améliorer la reconnaissance locale des objets (utile pour une utilisation hors ligne).
      responses:
        '200':
          description: Données du modèle AI récupérées avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  lastUpdated:
                    type: string
                    format: date-time
        '404':
          description: Données du modèle AI non trouvées.

  /waste-info:
    post:
      summary: Soumettre des informations manuelles sur un déchet
      description: Permet aux utilisateurs de soumettre des informations manuelles sur un article de déchet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item:
                  type: string # À déterminer avec le frontend
      responses:
        '200':
          description: Informations soumises avec succès.
        '400':
          description: Informations sur les déchets invalides.

  /location/recycling-info:
    get:
      summary: Obtenir des informations sur le recyclage en fonction de la géolocalisation
      description: Récupère les règles locales de recyclage et les informations basées sur la géolocalisation.
      parameters:
        - in: query
          name: lat
          required: true
          schema:
            type: number
            format: float
          description: Latitude de la localisation de l'utilisateur.
        - in: query
          name: long
          required: true
          schema:
            type: number
            format: float
          description: Longitude de la localisation de l'utilisateur.
      responses:
        '200':
          description: Informations locales de recyclage récupérées avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    type: string # À déterminer avec le frontend
        '400':
          description: Données de géolocalisation invalides.
        '404':
          description: Aucune information de recyclage trouvée pour la localisation donnée.

  /admin/promote/{id}:
    patch:
      summary: Promouvoir un utilisateur
      description: Permet de promouvoir l'utilisateur avec l'ID spécifié.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de l'utilisateur à promouvoir.
      responses:
        '200':
          description: L'utilisateur a été promu avec succès.
        '400':
          description: Entrée invalide.
        '401':
          description: Non autorisé.
        '404':
          description: Utilisateur non trouvé.
        '409':
          description: Utilisateur déjà admin.

  /admin/demote/{id}:
    patch:
      summary: Retirer les droits d'admin d'un utilisateur
      description: Retire les droits d'admin de l'utilisateur avec l'ID spécifié (uniquement possible pour le main admin).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de l'utilisateur à rétrograder.
      responses:
        '200':
          description: L'utilisateur a été rétrogradé avec succès.
        '400':
          description: Entrée invalide.
        '401':
          description: Non autorisé.
        '404':
          description: Utilisateur non trouvé.
        '409':
          description: Utilisateur non admin.

  /admin/restrict/{id}:
    patch:
      summary: Restreindre un utilisateur
      description: Restreint l'utilisateur avec l'ID spécifié. Si l'utilisateur est un admin, il faut d'abord lui retirer ses droits d'admin.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de l'utilisateur à restreindre.
      responses:
        '200':
          description: L'utilisateur a été restreint avec succès.
        '400':
          description: Entrée invalide ou tentative de restreindre un admin sans démotion préalable.
        '404':
          description: Utilisateur non trouvé.
        '409':
          description: Utilisateur déjà restreint ou admin.

  /admin/free/{id}:
    patch:
      summary: Libérer un utilisateur restreint
      description: Annule la restriction d'un utilisateur avec l'ID spécifié.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de l'utilisateur à libérer.
      responses:
        '200':
          description: L'utilisateur a été libéré avec succès.
        '400':
          description: Entrée invalide.
        '404':
          description: Utilisateur non trouvé.
        '409':
          description: Utilisateur non restreint.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ScanHistory:
      type: object
      properties:
        id:
          type: integer
          example: 1
        method:
          $ref: '#/components/schemas/ScanType'
        isValid:
          type: boolean
          example: true
        poubelle:
          $ref: '#/components/schemas/TypeBin'
        disposableType:
          $ref: '#/components/schemas/TypeDisposable'
        date:
          type: string
          format: date-time
          example: '2025-02-02T12:34:56.789Z'

    ScanType:
      type: string
      enum:
        - Questions
        - IA
        - Barcode
      example: 'Barcode'

    TypeBin:
      type: string
      enum:
        - rouge
        - jaune
        - bleu
        - orange
        - compost
      example: 'jaune'

    TypeDisposable:
      type: string
      enum:
        - PLASTIC PACKAGING
        - CARDBOARD PACKAGING
        - PAPER
        - GLASS PACKAGING
        - METAL PACKAGING
        - USED
        - DAMAGED
        - DISHES
        - ORGANIC
        - NOT PACKAGING
        - MEDICINE
        - TOXIC
        - DEVICE
        - TEXTILE
        - BULKY WASTE
      example: 'PLASTIC PACKAGING'

security:
  - BearerAuth: []
